# .github/workflows/send-dify-email.yml

name: Send Daily Email from Dify

on:
  schedule:
    # 每天的 UTC 时间上午 8 点运行 (对应北京时间下午 4 点)
    - cron: '0 8 * * *'
  
  # 允许在 Actions 页面手动触发此工作流，方便测试
  workflow_dispatch:

jobs:
  send_email_job:
    # ================= 重要提醒 =================
    # 因为此工作流需要访问公司内部服务器 (dify.comlan.com 和 mail.comlan.com),
    # 所以必须在自托管运行器 (Self-hosted Runner) 上运行。
    # 请将 'ubuntu-latest' 修改为 'self-hosted'。
    # runs-on: ubuntu-latest  <-- 在公网服务器上运行，将会失败
    runs-on: self-hosted      # <-- 在您公司内网的自托管运行器上运行

    name: Fetch from Dify and Send Email

    steps:
      # 步骤 1: 调用 Dify API，并将返回的原始数据作为输出
      - name: Fetch Content from Dify
        id: dify_content
        run: |
          API_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "inputs": {},
                  "response_mode": "blocking",
                  "user": "github-action-runner"
                }' \
            "https://dify.comlan.com/v1/workflows/run")

          # 检查 API 响应是否为空，如果为空则报错并中止
          if [ -z "$API_RESPONSE" ]; then
            echo "::error::Dify API returned an empty response."
            exit 1
          fi
          
          # 将从 Dify 获取到的全部原始响应内容设置为输出变量
          # 使用 EOF 来处理多行字符串，确保格式完全保留
          echo "raw_response<<EOF" >> $GITHUB_OUTPUT
          echo "$API_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 步骤 2: 使用上一步获取到的原始数据作为邮件内容发送
      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          # 邮件服务器配置 (请与您的IT部门确认最准确的配置)
          server_address: mail.comlan.com
          # 推荐使用 587 端口 (STARTTLS)，比 25 端口更安全
          server_port: 587
          # 当使用 587 端口时, secure 通常为 false, 因为它会通过 STARTTLS 升级连接
          secure: false 
          
          # 认证信息
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}

          # 邮件主题
          subject: '来自 Dify 的每日报告'
          
          # ============ 语法修正 ============
          # 将上一步的输出内容赋值给 html_body
          html_body: ${{ steps.dify_content.outputs.raw_response }}
          
          # 收件人
          to: wang.tianyang@comlan.com
          
          # 发件人
          from: ai.public@comlan.com
