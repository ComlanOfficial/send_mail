# .github/workflows/send-daily-email.yml

name: Send Daily Email from Dify

on:
  schedule:
    # 每天的 UTC 时间上午 8 点运行 (对应北京时间下午 4 点)
    - cron: '0 8 * * *'
  
  # 允许在 Actions 页面手动触发此工作流，方便测试
  workflow_dispatch:

jobs:
  send_email_job:
    runs-on: ubuntu-latest
    name: Fetch from Dify and Send Email

    steps:
      # 步骤 1: 调用 Dify API，并将返回的内容作为输出
      - name: Fetch Content from Dify
        id: fetch_dify_content # 为这个步骤设置一个 ID，方便后面引用
        run: |
          # 使用 curl 发送 POST 请求到你的 Dify 工作流 API
          # 注意替换 YOUR_DIFY_WORKFLOW_URL 为你真实的 Dify 工作流 URL
          API_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
                  "inputs": {},
                  "response_mode": "blocking",
                  "user": "github-action-runner"
                }' \
            "https://dify.comlan.com/v1/workflows/run")

          # 检查 API 响应是否为空，如果为空则报错并中止
          if [ -z "$API_RESPONSE" ]; then
            echo "::error::Dify API returned an empty response."
            exit 1
          fi
          
          # Dify 工作流通常返回一个 JSON 对象，我们需要提取其中的文本内容。
          # 假设内容在 .data.outputs.text 字段中，我们使用 jq 工具来解析它。
          # -r 参数可以输出原始字符串，而不是带引号的 JSON 字符串。
          CONTENT=$(echo "$API_RESPONSE" | jq -r '.data.outputs.text')
          
          # 为了能跨越多行，我们使用一种特殊的方式将内容设置为步骤的输出
          echo "dify_body<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 步骤 2: 发送邮件，使用上一步获取到的内容作为正文
      - name: Send email action
        uses: dawidd6/action-send-mail@v3
        with:
          # --- 您的邮件服务器配置 (保持不变) ---
          server_address: mail.comlan.com
          server_port: 25
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}

          # --- 您的邮件信息 ---
          subject: '每日报告 - 来自Dify'
          to: bo.wang@comlan.com,wang.tianyang@comlan.com
          from: ai.public@comlan.com
          
          # 必需: 邮件正文. 
          # 我们使用 html_body 以更好地支持 Dify 可能返回的 HTML 格式。
          # 它的值引用了上一个步骤 (id: fetch_dify_content) 的输出 (dify_body)。
          html_body: ${{ steps.fetch_dify_content.outputs.dify_body }}
